name: Create Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build Version
    strategy:
      max-parallel: 4
      matrix:
        file_type: [ msi, dmg ]
        include:
          - file_type: msi
            # op: windows-latest
            op: windows-2019
            output_dir: dist 
            package_args: --no-sign
          - file_type: dmg
            op: macos-latest
            output_dir: dist
            package_args: --no-sign
    runs-on: ${{ matrix.op }}
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Set up Python 3.11
        uses: actions/setup-python@v2
        with:
          python-version: 3.11
      - name: Install briefcase
        run: |
          python -m pip install --upgrade pip
          pip install briefcase
      - name: Briefcase create
        run: |
          briefcase create --no-input
      - name: Briefcase package
        run: |
          briefcase package ${{ matrix.package_args }}
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.file_type }}
          path: ${{ matrix.output_dir }}/*.${{ matrix.file_type }}

  create_release:
    name: Create Release
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false
      - name: Save release URL to file
        run: |
          echo "${{ steps.create_release.outputs.upload_url }}" > release.txt
      - name: Upload Release URL
        uses: actions/upload-artifact@v2
        with:
          name: release
          path: release.txt

  upload_release_artifacts:
    name: Upload Artifacts To Relase
    needs: [ create_release ]
    strategy:
      max-parallel: 4
      matrix:
        file_type: [ msi, dmg ]
        include:
          - file_type: msi
            output_dir: dist
          - file_type: dmg
            output_dir: dist
    runs-on: ubuntu-latest
    steps:
    - name: Download ${{ matrix.file_type }}
      uses: actions/download-artifact@v2
      with:
        name: ${{ matrix.file_type }}
        path: ${{ matrix.output_dir }}
    - name: Download release
      uses: actions/download-artifact@v2
      with:
        name: release
    - name: Set Release Environment Variables
      run: |
        RELEASE_URL=`cat release.txt`
        echo "RELEASE_URL=${RELEASE_URL}" >> $GITHUB_ENV
        echo "RELEASE_VERSION=${GITHUB_REF#refs/*/v}" >> $GITHUB_ENV
    - name: Upload ${{ matrix.file_type }} Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ env.RELEASE_URL }}
        asset_path: ${{ matrix.output_dir }}/Videogrep-${{ env.RELEASE_VERSION }}.${{ matrix.file_type }}
        asset_name: Videogrep-${{ env.RELEASE_VERSION }}.${{ matrix.file_type }}
        asset_content_type: application/x-ole-storage
